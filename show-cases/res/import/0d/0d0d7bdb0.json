[{"__type__":"cc.EffectAsset","_name":"skin","techniques":[{"passes":[{"program":"skin|general-vs:vert|skin-fs:frag","properties":{"albedoMap":{"value":"white","type":28},"normalMap":{"value":"normal","type":28},"occlusionMap":{"value":"white","type":28},"occlusion":{"value":[1],"type":13,"handleInfo":["params",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["params",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["params",2,13]},"scattering":{"value":[0.5],"type":13,"handleInfo":["params",3,13]},"params":{"type":16,"value":[1,0.8,0.6,0.5]}}}]}],"shaders":[{"hash":2557961491,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n};\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * i + a_jointAnimInfo.x;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * i + a_jointAnimInfo.x;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n    + getJointMatrix(a_joints.y) * a_weights.y;\n    + getJointMatrix(a_joints.z) * a_weights.z;\n    + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nin vec3 a_color;\nin vec2 a_texCoord;\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec3 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  v_position = (matWorld * In.position).xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec3 preIntegratedSkinCurveApprox (float NdotL, float Curvature) {\n  vec3 curve0;\n  {\n    const vec3 rangeMin = vec3(0.0, 0.3, 0.3);\n    const vec3 rangeMax = vec3(1.0, 0.7, 0.7);\n    const vec3 offset = vec3(0.0, 0.06, 0.06);\n    const vec3 m = vec3(1.75, 2.0, 1.97);\n    const vec3 lerpMin = vec3(0.0, 0.35, 0.35);\n    const vec3 lerpMax = vec3(1.0,  0.7,  0.6);\n    vec3 t = clamp(NdotL / (rangeMax - rangeMin) + (offset + rangeMin) / (rangeMin - rangeMax), 0.0, 1.0);\n    vec3 lowerLine = (t * t) * vec3(0.65, 0.5, 0.9);\n    lowerLine.r += 0.045;\n    lowerLine.b *= t.b;\n    vec3 upperLine = clamp(NdotL * m + vec3(0.99, 0.99, 0.99) - m, 0.0, 1.0);\n    vec3 lerpT = clamp(NdotL / (lerpMax - lerpMin) + lerpMin / (lerpMin - lerpMax), 0.0, 1.0);\n    curve0 = mix(lowerLine, upperLine, lerpT * lerpT);\n  }\n  vec3 curve1;\n  {\n    const vec3 m = vec3(1.95, 2.0, 2.0);\n    curve1 = clamp(NdotL * m + vec3(0.99, 0.99, 1.0) - m, 0.0, 1.0);\n  }\n  float curva = (1.0 / (Curvature * (0.5 - 0.0625) + 0.0625) - 2.0) / (16.0 - 2.0);\n  float oneMinusCurva = 1.0 - curva;\n  float oneMinusCurva2 = oneMinusCurva * oneMinusCurva;\n  return mix(curve0, curve1, 1.0 - oneMinusCurva2 * oneMinusCurva2);\n}\nvec3 SSSShading (vec3 N, float intensity) {\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float wrappedNL = dot(N, L) * 0.5 + 0.5;\n  vec3 scattering = preIntegratedSkinCurveApprox(wrappedNL, intensity);\n  return (1.0 - wrappedNL) * cc_mainLitColor.rgb * cc_mainLitColor.w * scattering;\n}\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform CCForwardLight {\n  highp vec4 cc_sphereLitPos[2];\n  vec4 cc_sphereLitSizeRange[2];\n  vec4 cc_sphereLitColor[2];\n  highp vec4 cc_spotLitPos[2];\n  vec4 cc_spotLitSizeRangeAngle[2];\n  vec4 cc_spotLitDir[2];\n  vec4 cc_spotLitColor[2];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb) * cc_ambientSky.w;\n    #endif\n    finalColor += env * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_tangent;\nin vec3 v_bitangent;\nin vec2 v_uv;\nuniform sampler2D albedoMap;\nuniform sampler2D normalMap;\nuniform sampler2D occlusionMap;\nuniform FSParams {\n  vec4 params;\n};\nvoid surf (out StandardSurface s) {\n  s.position = v_position;\n  vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n  s.normal =\n    nmmp.x * normalize(v_tangent) +\n    nmmp.y * normalize(v_bitangent) +\n    nmmp.z * normalize(v_normal);\n  s.albedo = texture(albedoMap, v_uv);\n  s.albedo.rgb = SRGBToLinear(s.albedo.rgb);\n  s.occlusion = params.x * texture(occlusionMap, v_uv).b;\n  s.roughness = params.y;\n  s.metallic = params.z;\n  s.emissive = vec3(0);\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color.rgb += SSSShading(normalize(s.normal), params.w) * s.albedo.rgb * s.occlusion;\n  return CCFragOutput(color);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * i + a_jointAnimInfo.x;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * i + a_jointAnimInfo.x;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n    + getJointMatrix(a_joints.y) * a_weights.y;\n    + getJointMatrix(a_joints.z) * a_weights.z;\n    + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nattribute vec3 a_color;\nattribute vec2 a_texCoord;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  v_position = (matWorld * In.position).xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  #ifdef GL_EXT_shader_texture_lod\n    #extension GL_EXT_shader_texture_lod : enable\n  #endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\nvec3 preIntegratedSkinCurveApprox (float NdotL, float Curvature) {\n  vec3 curve0;\n  {\n    const vec3 rangeMin = vec3(0.0, 0.3, 0.3);\n    const vec3 rangeMax = vec3(1.0, 0.7, 0.7);\n    const vec3 offset = vec3(0.0, 0.06, 0.06);\n    const vec3 m = vec3(1.75, 2.0, 1.97);\n    const vec3 lerpMin = vec3(0.0, 0.35, 0.35);\n    const vec3 lerpMax = vec3(1.0,  0.7,  0.6);\n    vec3 t = clamp(NdotL / (rangeMax - rangeMin) + (offset + rangeMin) / (rangeMin - rangeMax), 0.0, 1.0);\n    vec3 lowerLine = (t * t) * vec3(0.65, 0.5, 0.9);\n    lowerLine.r += 0.045;\n    lowerLine.b *= t.b;\n    vec3 upperLine = clamp(NdotL * m + vec3(0.99, 0.99, 0.99) - m, 0.0, 1.0);\n    vec3 lerpT = clamp(NdotL / (lerpMax - lerpMin) + lerpMin / (lerpMin - lerpMax), 0.0, 1.0);\n    curve0 = mix(lowerLine, upperLine, lerpT * lerpT);\n  }\n  vec3 curve1;\n  {\n    const vec3 m = vec3(1.95, 2.0, 2.0);\n    curve1 = clamp(NdotL * m + vec3(0.99, 0.99, 1.0) - m, 0.0, 1.0);\n  }\n  float curva = (1.0 / (Curvature * (0.5 - 0.0625) + 0.0625) - 2.0) / (16.0 - 2.0);\n  float oneMinusCurva = 1.0 - curva;\n  float oneMinusCurva2 = oneMinusCurva * oneMinusCurva;\n  return mix(curve0, curve1, 1.0 - oneMinusCurva2 * oneMinusCurva2);\n}\nvec3 SSSShading (vec3 N, float intensity) {\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float wrappedNL = dot(N, L) * 0.5 + 0.5;\n  vec3 scattering = preIntegratedSkinCurveApprox(wrappedNL, intensity);\n  return (1.0 - wrappedNL) * cc_mainLitColor.rgb * cc_mainLitColor.w * scattering;\n}\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp vec4 cc_sphereLitPos[2];\nuniform vec4 cc_sphereLitSizeRange[2];\nuniform vec4 cc_sphereLitColor[2];\nuniform highp vec4 cc_spotLitPos[2];\nuniform vec4 cc_spotLitSizeRangeAngle[2];\nuniform vec4 cc_spotLitDir[2];\nuniform vec4 cc_spotLitColor[2];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb) * cc_ambientSky.w;\n    #endif\n    finalColor += env * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nuniform sampler2D albedoMap;\nuniform sampler2D normalMap;\nuniform sampler2D occlusionMap;\nuniform vec4 params;\nvoid surf (out StandardSurface s) {\n  s.position = v_position;\n  vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n  s.normal =\n    nmmp.x * normalize(v_tangent) +\n    nmmp.y * normalize(v_bitangent) +\n    nmmp.z * normalize(v_normal);\n  s.albedo = texture2D(albedoMap, v_uv);\n  s.albedo.rgb = SRGBToLinear(s.albedo.rgb);\n  s.occlusion = params.x * texture2D(occlusionMap, v_uv).b;\n  s.roughness = params.y;\n  s.metallic = params.z;\n  s.emissive = vec3(0);\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color.rgb += SSSShading(normalize(s.normal), params.w) * s.albedo.rgb * s.occlusion;\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCForwardLight","defines":[]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"}],"blocks":[{"name":"FSParams","members":[{"name":"params","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"albedoMap","type":28,"count":1,"defines":[],"binding":30},{"name":"normalMap","type":28,"count":1,"defines":[],"binding":31},{"name":"occlusionMap","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":4},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":5},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":3},{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_normal","type":15,"count":1,"defines":[],"format":32,"location":1},{"name":"a_tangent","type":16,"count":1,"defines":[],"format":43,"location":2},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":7},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":8},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":9},{"name":"a_jointAnimInfo","type":16,"count":1,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":10},{"name":"a_color","type":15,"count":1,"defines":[],"format":32,"location":11},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":12},{"name":"a_texCoord1","type":14,"count":1,"defines":["HAS_SECOND_UV"],"format":21,"location":13}],"record":null,"name":"skin|general-vs:vert|skin-fs:frag"}]},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"2drJ9r2RhIU7CKb9M/SAUq"},"_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"roughness":0.9,"metallic":0.1,"albedoMap":{"__uuid__":"6e22wFFiZAvKTlmJ709jNl@6c48a"},"normalMap":{"__uuid__":"caM5h0pnRGP4GmkyxWGGII@6c48a"},"occlusionMap":{"__uuid__":"4dKV8/KnJFb4fYBHRTELrk@6c48a"}}]},{"__type__":"cc.Mesh","_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1697616,"length":106104,"count":53052,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1697616,"count":35367,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-0.002211545128375292,"y":-0.0030504956375807524,"z":-0.0022110282443463802},"maxPosition":{"__type__":"cc.Vec3","x":0.002321350621059537,"y":0.0011603956809267402,"z":0.0005347641999833286},"morph":{"subMeshMorphs":[null]}},"_dataLength":1803720,"_hash":2522087037},[{"__type__":"cc.SceneAsset","scene":{"__id__":1}},{"__type__":"cc.Scene","_children":[{"__id__":2},{"__id__":3},{"__id__":4},{"__id__":7},{"__id__":8}],"_globals":{"__type__":"cc.SceneGlobals","ambient":{"__type__":"cc.AmbientInfo","_skyColor":{"__type__":"cc.Color","r":51,"g":51,"b":51,"a":1}},"planarShadows":{"__type__":"cc.PlanarShadowInfo"},"_skybox":{"__type__":"cc.SkyboxInfo"}}},{"__type__":"cc.Node","_name":"Main Light","_parent":{"__id__":1},"_components":[{"__type__":"cc.DirectionalLightComponent","_name":"Main Light<DirectionalLightComponent>","node":{"__id__":2}},{"__type__":"16cc7mJ/bNIUKCCsSKIjPsT","node":{"__id__":2},"speed":20}],"_lpos":{"__type__":"cc.Vec3","x":11.234,"y":30.822,"z":30.839},"_lrot":{"__type__":"cc.Quat","x":0.15597738448535525,"y":-0.3654606998477571,"z":0.062269006569464526,"w":-0.9155501642273608},"_euler":{"__type__":"cc.Vec3","x":-374.276,"y":41.863,"z":-13.181},"_id":"c0y6F5f+pAvI805TdmxIjx"},{"__type__":"cc.Node","_name":"Camera","_parent":{"__id__":1},"_components":[{"__type__":"cc.CameraComponent","node":{"__id__":3},"_visibility":1822425087},{"__type__":"41634RuzwBMPotfcRtAog7n","node":{"__id__":3}}],"_lpos":{"__type__":"cc.Vec3","x":-30.976582908662003,"y":44.48572275198796,"z":49.79750905272096},"_lrot":{"__type__":"cc.Quat","x":-0.15885276972659745,"y":-0.2753064324716202,"z":-0.04391484786356605,"w":0.9471128583355609},"_euler":{"__type__":"cc.Vec3","x":-18.97081144122087,"y":-32.37451324726784,"z":0.24532663706799965},"_id":"c9DMICJLFO5IeO07EPon7U"},{"__type__":"cc.Node","_name":"head","_parent":{"__id__":1},"_children":[{"__id__":5}],"_components":[{"__id__":6},{"__type__":"5d0e06TqCJOgYWfO1jCim+/","_name":"head<SSS>","node":{"__id__":4}}],"_lpos":{"__type__":"cc.Vec3","y":30},"_lscale":{"__type__":"cc.Vec3","x":10000,"y":10000,"z":10000},"_id":"9f6zGKEPBCiIs+AsSl0gIv"},{"__type__":"cc.Node","_name":"tangent spaces","_parent":{"__id__":4},"_active":false,"_components":[{"__type__":"e318flB6JhFT5zHRmxMuBHD","node":{"__id__":5},"target":{"__id__":6},"scale":0.00008},{"__type__":"cc.ModelComponent","node":{"__id__":5},"_materials":[null],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"}},{"__type__":"cc.ModelComponent","node":{"__id__":5},"_materials":[null],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"}},{"__type__":"cc.ModelComponent","node":{"__id__":5},"_materials":[null],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"}}]},{"__type__":"cc.ModelComponent","_name":"head<ModelComponent>","node":{"__id__":4},"_materials":[{"__uuid__":"096LXxRuFND4bLbQDoVt+J"}],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"},"_mesh":{"__uuid__":"39kLc8Tc1K2JH14aTgnW/h@e97a2"}},{"__type__":"cc.Node","_name":"sphere","_parent":{"__id__":1},"_components":[{"__type__":"cc.ModelComponent","node":{"__id__":7},"_materials":[{"__uuid__":"c3cMoaMhhOFphO496TkdaY"}],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"},"_mesh":{"__uuid__":"12Y9dMgWdJKJGmTiZyQR9H@17020"}},{"__type__":"5d0e06TqCJOgYWfO1jCim+/","node":{"__id__":7}}],"_lpos":{"__type__":"cc.Vec3","x":30,"y":5,"z":-10},"_lscale":{"__type__":"cc.Vec3","x":10,"y":10,"z":10},"_id":"67eqS2l5hH+qHs0cfqIOyS"},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":9},{"__id__":12},{"__id__":13}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":8},"_contentSize":{"__type__":"cc.Size","width":960,"height":640}},{"__type__":"cc.CanvasComponent","node":{"__id__":8}}],"_lpos":{"__type__":"cc.Vec3","x":480,"y":320,"z":1},"_layer":33554432,"_id":"adYrHz33dHhaiOCs9E7kyD"},{"__type__":"cc.Node","_name":"New Slider","_parent":{"__id__":8},"_children":[{"__id__":10}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":9},"_contentSize":{"__type__":"cc.Size","width":300,"height":20}},{"__type__":"cc.SpriteComponent","node":{"__id__":9},"_sharedMaterial":{"__uuid__":"fdoJXLgx1GAa2UhGATlj3o"},"_spriteFrame":{"__uuid__":"28dl4vBApMZY6M+dC7edhj@f9941"},"_type":1,"_sizeMode":0},{"__type__":"cc.SliderComponent","node":{"__id__":9},"slideEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":4},"_componentId":"5d0e06TqCJOgYWfO1jCim+/","handler":"setSSSIntensity"},{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"5d0e06TqCJOgYWfO1jCim+/","handler":"setSSSIntensity"},{"__type__":"cc.ClickEvent","target":{"__id__":12},"_componentId":"b083fbk5OpHE6avlzMP8i4O","handler":"setStringBySliderValue"}],"_handle":{"__id__":11},"_progress":0.5},{"__type__":"cc.WidgetComponent","node":{"__id__":9},"_alignFlags":33,"_target":{"__id__":8},"_left":0.03,"_right":0.03,"_top":0.1,"_bottom":0.03,"_isAbsLeft":false,"_isAbsRight":false,"_isAbsTop":false,"_isAbsBottom":false,"_alignMode":1}],"_lpos":{"__type__":"cc.Vec3","x":301.2,"y":246},"_layer":33554432},{"__type__":"cc.Node","_name":"Handle","_parent":{"__id__":9},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":10},"_contentSize":{"__type__":"cc.Size","width":32,"height":32}},{"__id__":11},{"__type__":"cc.ButtonComponent","node":{"__id__":10},"_normalSprite":{"__uuid__":"f1KiPEuSRDIqJgPZgkKPHo@f9941"},"_target":{"__id__":10}}],"_layer":33554432},{"__type__":"cc.SpriteComponent","node":{"__id__":10},"_sharedMaterial":{"__uuid__":"fdoJXLgx1GAa2UhGATlj3o"},"_spriteFrame":{"__uuid__":"f1KiPEuSRDIqJgPZgkKPHo@f9941"},"_sizeMode":0},{"__type__":"cc.Node","_name":"New Label","_parent":{"__id__":8},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":12},"_contentSize":{"__type__":"cc.Size","width":170.1,"height":40}},{"__type__":"cc.LabelComponent","node":{"__id__":12},"_string":"SSS Intensity: 1.00","_horizontalAlign":0,"_verticalAlign":0,"_actualFontSize":20,"_fontSize":20},{"__type__":"cc.WidgetComponent","node":{"__id__":12},"_alignFlags":33,"_target":{"__id__":8},"_left":0.03,"_right":0.03,"_top":0.15,"_bottom":0.05,"_isAbsLeft":false,"_isAbsRight":false,"_isAbsTop":false,"_isAbsBottom":false,"_alignMode":1},{"__type__":"b083fbk5OpHE6avlzMP8i4O","node":{"__id__":12},"prefix":"SSS Intensity: "}],"_lpos":{"__type__":"cc.Vec3","x":366.15,"y":204},"_layer":33554432},{"__type__":"cc.Node","_name":"New Toggle","_parent":{"__id__":8},"_children":[{"__id__":14}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":13},"_contentSize":{"__type__":"cc.Size","width":28,"height":28}},{"__type__":"cc.SpriteComponent","node":{"__id__":13},"_sharedMaterial":{"__uuid__":"fdoJXLgx1GAa2UhGATlj3o"},"_spriteFrame":{"__uuid__":"11vcSwZKhOt6Knn7niM+l3@f9941"}},{"__type__":"cc.ToggleComponent","node":{"__id__":13},"_normalSprite":{"__uuid__":"11vcSwZKhOt6Knn7niM+l3@f9941"},"_target":{"__id__":13},"checkEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":4},"_componentId":"5d0e06TqCJOgYWfO1jCim+/","handler":"toggle"}],"_checkMark":{"__id__":15}},{"__type__":"cc.WidgetComponent","node":{"__id__":13},"_alignFlags":33,"_left":0.03,"_right":0.03,"_top":0.2,"_bottom":0.15,"_isAbsLeft":false,"_isAbsRight":false,"_isAbsTop":false,"_isAbsBottom":false,"_alignMode":1}],"_lpos":{"__type__":"cc.Vec3","x":437.2,"y":178},"_layer":33554432},{"__type__":"cc.Node","_name":"Checkmark","_parent":{"__id__":13},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":14},"_contentSize":{"__type__":"cc.Size","width":26,"height":26}},{"__id__":15}],"_layer":33554432},{"__type__":"cc.SpriteComponent","node":{"__id__":14},"_sharedMaterial":{"__uuid__":"fdoJXLgx1GAa2UhGATlj3o"},"_spriteFrame":{"__uuid__":"15jn5SMiBM15aUcT4OboJ4@f9941"},"_sizeMode":0}],{"__type__":"cc.Material","_effectAsset":{"__uuid__":"2drJ9r2RhIU7CKb9M/SAUq"},"_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"pbrParams":{"__type__":"cc.Vec4","x":0.8,"y":0.6,"z":1,"w":0.5}}]}]
